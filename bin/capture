#!/usr/bin/env node

var program = require('../lib/commander/');
var capture = require('../index');
var fs = require('fs');

function wrapLine(str, columns) {
    var wordExp = /([\S]+)(\s*)/g, space = /\s*$/, word, currentLine = '', lines = [];

    if (!str) {
        return str;
    }
    if (str.length <= columns) {
        return str.replace(space, '');
    }

    while ((word = wordExp.exec(str))) {
        if (word[1].length > columns) {
            // word is too long to fit into current line
            for (var i = 0; i < word[1].length; i += columns) {
                currentLine = word[1].substring(i, i + columns);
                lines.push(currentLine.replace(space, ''));
                currentLine = '';
            }
        } else {
            if (currentLine.length + word[1].length <= columns) {
                // new word fits in with current line, also append whitespace
                currentLine += word[1] + word[2];
            } else {
                lines.push(currentLine.replace(space, ''));
                currentLine = word[1] + word[2];
            }
        }
    }

    if (currentLine) {
        // add additional lines
        lines.push(currentLine.replace(space, ''));
        currentLine = '';
    }
    return lines.join('\n');
}

function wrapText(str, columns) {
    if (!str) {
        return str;
    }

    var lines = str.split('\n');
    return lines.map(function (l) { return wrapLine(l, columns); }).join('\n');
}

var executed = false;

program.version('0.2.7') // automatically updated from package.json
    .usage('<applicationRoot> [options]')
    .option('-p, --port <portNumber>', 'Port number to start listening on [8000]', '8000')
    .option('-a, --ashost <hostName>', 'Set the host header on the proxied request. By default the `host` is based on the application root')
    .option('-r, --response', 'Save responses')
    .option('-R, --request', 'Save requests and responses')
    .option('-o, --output [location]', 'When request or response capture is enabled, save files to this folder [./output]', './output')
    .option('-k, --insecure', 'Allow connections to SSL sites without valid certs')
    .option('-z, --zip', 'Enable compression. By default the `accept-encoding` header is removed')
    .option('-v, --verbose', 'Output requests and responses')
    ;

program.command('replay')
    .usage('<file|alias> [options]')
    .description('Re-issue a request from a previously recorded file')
    .option('-H, --headers', 'Output headers')
    .option('-k, --insecure', 'Allow connections to SSL sites without valid certs')
    .option('-v, --verbose', 'Output requests')
    .action(function (file, cmd) {
        var contents = capture.load(file);
        capture.replay(contents, {
            outputHeaders: cmd.headers,
            insecure: cmd.insecure || program.insecure,
            verbose: cmd.verbose || program.verbose
        });
        executed = true;
    });

program.command('alias')
    .usage('<alias> <requestFile>')
    .description('Save a request file as a global alias that can be referenced from any location on the system')
    .action(function (alias, file, cmd) {
        capture.save(file, alias);
        executed = true;
    });

// use if wrap method for commander is available
if (program.wrap) {
    program.wrap();
}

program.on('--help', function () {
    var columns = 60;
    if (require('tty').isatty(process.stdout.fd) && process.stdout.columns >= 60) {
        columns = process.stdout.columns;
    }
    var description = 'Capture is a http proxy that can be used to intercept http requests and persist the request and response payloads.\n\n<applicationRoot> is the mounting point for the proxy. (e.g. http://my.host.com/application/root/)\n';
    console.log(wrapText(description, columns));
});

program.parse(process.argv);

if (!executed) {
    var applicationRoot = program.args[0];

    if (!applicationRoot) {
        console.error('No <applicationRoot> specified.');
        program.help();
    }

    capture.listen(applicationRoot, program.port, {
        response: program.response,
        request: program.request,
        hostname: program.ashost,
        output: require('path').resolve(process.cwd(), program.output),
        insecure: program.insecure,
        zip: program.zip,
        verbose: program.verbose
    });
}
